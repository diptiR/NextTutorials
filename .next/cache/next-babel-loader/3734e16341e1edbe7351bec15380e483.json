{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\NextJS\\\\NextTutorial\\\\pages\\\\staticGenerationWithData\\\\index.js\";\n\nfunction Blog(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: posts.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Blog;\nexport var __N_SSG = true;\nexport default Blog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"sources":["D:/NextJS/NextTutorial/pages/staticGenerationWithData/index.js"],"names":["Blog","posts","map","post","title"],"mappings":";;;AAAA,SAASA,IAAT,OAAyB;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;AACrB,sBACE;AAAA,cACGA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,0BACT;AAAA,kBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,eADS;AAAA,KAAV;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KARMJ,I;;AAqCP,eAAeA,IAAf","sourcesContent":["function Blog({ posts }) {\r\n    return (\r\n      <ul>\r\n        {posts.map((post) => (\r\n          <li>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n  \r\n  export async function getStaticProps() {\r\n    // Call an external API endpoint to get posts\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n    const posts = await res.json()\r\n  \r\n    // By returning { props: posts }, the Blog component\r\n    // will receive `posts` as a prop at build time\r\n    return {\r\n      props: {\r\n        posts,\r\n      },\r\n    }\r\n  }\r\n\r\n  export async function getStaticPaths() {\r\n    // Call an external API endpoint to get posts\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n    const posts = await res.json()\r\n  \r\n    // Get the paths we want to pre-render based on posts\r\n    const paths = posts.map((post) => `/posts/${post.id}`)\r\n  \r\n    // We'll pre-render only these paths at build time.\r\n    // { fallback: false } means other routes should 404.\r\n    return { paths, fallback: false }\r\n  }\r\n  \r\n  export default Blog"]},"metadata":{},"sourceType":"module"}