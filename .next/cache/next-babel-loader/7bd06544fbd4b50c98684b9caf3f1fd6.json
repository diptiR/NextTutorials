{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\NextJS\\\\NextTutorial\\\\pages\\\\staticGenerationWithData\\\\index.js\";\n\nfunction Blog({\n  posts\n}) {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 7\n  }, this);\n}\n\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const posts = await res.json(); // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n\n  return {\n    props: {\n      posts\n    }\n  };\n}\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => `/posts/${post.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport default Blog;","map":{"version":3,"sources":["D:/NextJS/NextTutorial/pages/staticGenerationWithData/index.js"],"names":["Blog","posts","map","post","title","getStaticProps","res","fetch","json","props","getStaticPaths","paths","id","fallback"],"mappings":";;;AAAA,SAASA,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAyB;AACrB,sBACE;AAAA,cACGA,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACT;AAAA,gBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,QAAMN,KAAK,GAAG,MAAMK,GAAG,CAACE,IAAJ,EAApB,CAHqC,CAKrC;AACA;;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLR,MAAAA;AADK;AADF,GAAP;AAKD;AAED,OAAO,eAAeS,cAAf,GAAgC;AACrC;AACA,QAAMJ,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,QAAMN,KAAK,GAAG,MAAMK,GAAG,CAACE,IAAJ,EAApB,CAHqC,CAKrC;;AACA,QAAMG,KAAK,GAAGV,KAAK,CAACC,GAAN,CAAWC,IAAD,IAAW,UAASA,IAAI,CAACS,EAAG,EAAtC,CAAd,CANqC,CAQrC;AACA;;AACA,SAAO;AAAED,IAAAA,KAAF;AAASE,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,eAAeb,IAAf","sourcesContent":["function Blog({ posts }) {\r\n    return (\r\n      <ul>\r\n        {posts.map((post) => (\r\n          <li>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n  \r\n  export async function getStaticProps() {\r\n    // Call an external API endpoint to get posts\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n    const posts = await res.json()\r\n  \r\n    // By returning { props: posts }, the Blog component\r\n    // will receive `posts` as a prop at build time\r\n    return {\r\n      props: {\r\n        posts,\r\n      },\r\n    }\r\n  }\r\n\r\n  export async function getStaticPaths() {\r\n    // Call an external API endpoint to get posts\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n    const posts = await res.json()\r\n  \r\n    // Get the paths we want to pre-render based on posts\r\n    const paths = posts.map((post) => `/posts/${post.id}`)\r\n  \r\n    // We'll pre-render only these paths at build time.\r\n    // { fallback: false } means other routes should 404.\r\n    return { paths, fallback: false }\r\n  }\r\n  \r\n  export default Blog"]},"metadata":{},"sourceType":"module"}