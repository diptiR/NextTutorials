{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\NextJS\\\\NextTutorial\\\\pages\\\\posts\\\\[id].js\";\n\nfunction Post({\n  post\n}) {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: post.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 2,\n    columnNumber: 10\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => `/posts/${post.id}`); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);\n  const post = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["D:/NextJS/NextTutorial/pages/posts/[id].js"],"names":["Post","post","title","getStaticPaths","res","fetch","posts","json","paths","map","id","fallback","getStaticProps","params","props"],"mappings":";;;AAAA,SAASA,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AACtB,sBAAO;AAAA,cAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAHqC,CAKrC;;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWR,IAAD,IAAW,UAASA,IAAI,CAACS,EAAG,EAAtC,CAAd,CANqC,CAQrC;AACA;;AACA,SAAO;AAAEF,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C;AACA;AACA,QAAMT,GAAG,GAAG,MAAMC,KAAK,CACpB,8CAA6CQ,MAAM,CAACH,EAAG,EADnC,CAAvB;AAGA,QAAMT,IAAI,GAAG,MAAMG,GAAG,CAACG,IAAJ,EAAnB,CAN+C,CAQ/C;;AACA,SAAO;AAAEO,IAAAA,KAAK,EAAE;AAAEb,MAAAA;AAAF;AAAT,GAAP;AACD;AAED,eAAeD,IAAf","sourcesContent":["function Post({ post }) {\r\n  return <p>{post.title}</p>;\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  // Call an external API endpoint to get posts\r\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\r\n  const posts = await res.json();\r\n\r\n  // Get the paths we want to pre-render based on posts\r\n  const paths = posts.map((post) => `/posts/${post.id}`);\r\n\r\n  // We'll pre-render only these paths at build time.\r\n  // { fallback: false } means other routes should 404.\r\n  return { paths, fallback: false };\r\n}\r\n\r\n// This also gets called at build time\r\nexport async function getStaticProps({ params }) {\r\n  // params contains the post `id`.\r\n  // If the route is like /posts/1, then params.id is 1\r\n  const res = await fetch(\r\n    `https://jsonplaceholder.typicode.com/posts/${params.id}`\r\n  );\r\n  const post = await res.json();\r\n\r\n  // Pass post data to the page via props\r\n  return { props: { post } };\r\n}\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}